#!/bin/env python
# -*- coding: utf-8 -*-
import os
from subroutines.soop_xbt_realtime_processSBD import soop_xbt_realtime_processSBD
import logging
import logging.config

#####################
# Logging Functions #
#####################
# start logging using logging python library
# output:
#     logger - similar to a file handler
def loggingSoop():
    logFile                   = os.environ.get('logfile_xbt_path')
    #logging.config.fileConfig('subroutines/logging.ini')

    logging.basicConfig(level = logging.INFO)
    logger                    = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)

    # create a file handler
    handler                   = logging.FileHandler(logFile)
    handler.setLevel(logging.INFO)

    # create a logging format
    formatter                 = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)

    # add the handlers to the logger
    logger.addHandler(handler)

    return logger

# close logging
# input:
#     logger : logging handler generated by loggingAims()
def closeLogger(logger):
    #closes the handlers of the specified logger only
    x = list(logger.handlers)
    for i in x:
        logger.removeHandler(i)
        i.flush()
        i.close()

if __name__ == "__main__":
    logger = loggingSoop()

    # csiro ftp config
    csiro_ftp_address           = os.environ.get('csiro_ftp_address')
    csiro_ftp_subdir            = os.environ.get('csiro_ftp_subdir')
    csiro_ftp_username          = os.environ.get('csiro_ftp_username')
    csiro_ftp_password          = os.environ.get('csiro_ftp_password')
    csiro_ftp_filetype          = os.environ.get('csiro_ftp_filetype')

    # local storage
    temporaryDataFolderUnsorted = os.environ.get('temporary_data_folder_unsorted_xbt_path')
    temporaryDataFolderSorted   = os.environ.get('temporary_data_folder_sorted_xbt_path')


    # download SOOP data from csiro's FTP
    logger.info('Download new SOOP XBT NRT files')
    try:
        cmd =  ('lftp'+ \
            ' -e \'mirror ' + csiro_ftp_subdir +' '+  temporaryDataFolderUnsorted + '\' ' +\
            csiro_ftp_address + '<<EOF')
        msg = os.system(cmd)

    except Exception, e:
        print str(e)

    logger.info('Convert SBD files to CSV')
    processSBD = soop_xbt_realtime_processSBD()
    try:
        processSBD.processFiles(temporaryDataFolderUnsorted)
    except Exception, e:
        print str(e)
        pass

    closeLogger(logger)
